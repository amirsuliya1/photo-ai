
import { GoogleGenAI, Modality } from '@google/genai';

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

const base64ToGenerativePart = (data: string, mimeType: string) => {
  return {
    inlineData: {
      data,
      mimeType,
    },
  };
};

export const generatePhotoShoot = async (
  modelImageBase64: string,
  productImageBase64: string,
  prompt: string
): Promise<string> => {
  try {
    // Extract mime type and data from base64 strings
    const [modelMimeType, modelData] = modelImageBase64.split(';base64,');
    const [productMimeType, productData] = productImageBase64.split(';base64,');
    
    const modelPart = base64ToGenerativePart(modelData, modelMimeType.replace('data:', ''));
    const productPart = base64ToGenerativePart(productData, productMimeType.replace('data:', ''));

    const textPart = {
      text: prompt,
    };

    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image-preview',
        contents: {
            parts: [modelPart, productPart, textPart],
        },
        config: {
            responseModalities: [Modality.IMAGE, Modality.TEXT],
        },
    });

    for (const part of response.candidates[0].content.parts) {
        if (part.inlineData) {
            return `data:${part.inlineData.mimeType};base64,${part.inlineData.data}`;
        }
    }
    
    throw new Error('No image was generated by the AI.');

  } catch (error) {
    console.error('Error generating image with Gemini:', error);
    throw new Error('Failed to communicate with the AI model.');
  }
};
